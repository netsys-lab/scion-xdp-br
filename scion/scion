#!/bin/bash
# Copyright (c) 2022 Lars-Christian Schulz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
PROJECT_DIR=$(readlink -f "$SCRIPT_DIR/..")

DOCKER_IMAGE=scion_host:latest
COMPOSE_FILE=$SCRIPT_DIR/docker-compose-star.yaml
COMPOSE_PROJECT=xdp-br

# Export paths so they are visible in the compose file
export TOPO_DIR=${PWD}
export BUILD_DIR=${PROJECT_DIR}/build
export SCION_ROOT=${HOME}/scion
export SCION_APPS=${HOME}/scion-apps

. helper.bash

# Disable UDP checksum offload on all interfaces.
disable_checksum_offload() {
    sudo ip netns exec as1br1 ethtool --offload veth0 rx off tx off > /dev/null
    sudo ip netns exec as1br2 ethtool --offload veth1 rx off tx off > /dev/null
    sudo ip netns exec as1br2 ethtool --offload veth2 rx off tx off > /dev/null
    sudo ip netns exec as1br3 ethtool --offload veth3 rx off tx off > /dev/null
    sudo ip netns exec as1br3 ethtool --offload veth4 rx off tx off > /dev/null
    sudo ip netns exec as1br4 ethtool --offload veth5 rx off tx off > /dev/null
    sudo ip netns exec as1br4 ethtool --offload veth6 rx off tx off > /dev/null
    sudo ip netns exec as1br1 ethtool --offload veth7 rx off tx off > /dev/null
    sudo ip netns exec as1br1 ethtool --offload veth8 rx off tx off > /dev/null
    sudo ip netns exec as2 ethtool --offload veth9 rx off tx off > /dev/null
    sudo ip netns exec as1br2 ethtool --offload veth10 rx off tx off > /dev/null
    sudo ip netns exec as3 ethtool --offload veth11 rx off tx off > /dev/null
    sudo ip netns exec as1br2 ethtool --offload veth12 rx off tx off > /dev/null
    sudo ip netns exec as4 ethtool --offload veth13 rx off tx off > /dev/null
    sudo ip netns exec as1br3 ethtool --offload veth14 rx off tx off > /dev/null
    sudo ip netns exec as5 ethtool --offload veth15 rx off tx off > /dev/null
    sudo ip netns exec as1br4 ethtool --offload veth16 rx off tx off > /dev/null
    sudo ip netns exec as6 ethtool --offload veth17 rx off tx off > /dev/null
    sudo ip netns exec as1br4 ethtool --offload veth18 rx off tx off > /dev/null
    sudo ip netns exec as7 ethtool --offload veth19 rx off tx off > /dev/null
}

# Load a pass-through program on interfaces that would otherwise not have an XDP program and
# therefore could not received packets passed from another XDP program.
load_xdp_pass() {
    local XDP_PASS=${BUILD_DIR}/br/xdp_pass.c.o
    sudo ip netns exec as2 ip link set dev veth9 xdp object "${XDP_PASS}" section xdp
    sudo ip netns exec as3 ip link set dev veth11 xdp object "${XDP_PASS}" section xdp
    sudo ip netns exec as4 ip link set dev veth13 xdp object "${XDP_PASS}" section xdp
    sudo ip netns exec as5 ip link set dev veth15 xdp object "${XDP_PASS}" section xdp
    sudo ip netns exec as6 ip link set dev veth17 xdp object "${XDP_PASS}" section xdp
    sudo ip netns exec as7 ip link set dev veth19 xdp object "${XDP_PASS}" section xdp
}

# Configure internal routing in AS 1-ff00:0:1.
set_as1_routes() {
    # BR 1
    sudo ip netns exec as1br1 sysctl -w net.ipv4.ip_forward=1
    # Destination BR 2
    sudo ip netns exec as1br1 ip route replace 10.2.0.2/32 \
        nexthop via 10.2.0.1 dev veth0
    # Destination BR 4
    sudo ip netns exec as1br1 ip route replace 10.2.0.5/32 \
        nexthop via 10.2.0.6 dev veth7
    # Destination BR 3
    sudo ip netns exec as1br1 ip route replace 10.2.0.3/32 \
        nexthop via 10.2.0.1 dev veth0 weight 1 \
        nexthop via 10.2.0.6 dev veth7 weight 1
    sudo ip netns exec as1br1 ip route replace 10.2.0.4/32 \
        nexthop via 10.2.0.1 dev veth0 weight 1 \
        nexthop via 10.2.0.6 dev veth7 weight 1

    # BR 2
    sudo ip netns exec as1br2 sysctl -w net.ipv4.ip_forward=1
    # Destination BR 1
    sudo ip netns exec as1br2 ip route replace 10.2.0.7/32 \
        nexthop via 10.2.0.0 dev veth1
    # Destination BR 3
    sudo ip netns exec as1br2 ip route replace 10.2.0.4/32 \
        nexthop via 10.2.0.3 dev veth2
    # Destination BR 4
    sudo ip netns exec as1br2 ip route replace 10.2.0.5/32 \
        nexthop via 10.2.0.0 dev veth1 weight 1 \
        nexthop via 10.2.0.3 dev veth2 weight 1
    sudo ip netns exec as1br2 ip route replace 10.2.0.6/32 \
        nexthop via 10.2.0.0 dev veth1 weight 1 \
        nexthop via 10.2.0.3 dev veth2 weight 1

    # BR 3
    sudo ip netns exec as1br3 sysctl -w net.ipv4.ip_forward=1
    # Destination BR 2
    sudo ip netns exec as1br3 ip route replace 10.2.0.1/32 \
        nexthop via 10.2.0.2 dev veth3
    # Destination BR 4
    sudo ip netns exec as1br3 ip route replace 10.2.0.6/32 \
        nexthop via 10.2.0.5 dev veth4
    # Destination BR 1
    sudo ip netns exec as1br3 ip route replace 10.2.0.0/32 \
        nexthop via 10.2.0.2 dev veth3 weight 1 \
        nexthop via 10.2.0.5 dev veth4 weight 1
    sudo ip netns exec as1br3 ip route replace 10.2.0.7/32 \
        nexthop via 10.2.0.2 dev veth3 weight 1 \
        nexthop via 10.2.0.5 dev veth4 weight 1

    # BR 4
    sudo ip netns exec as1br4 sysctl -w net.ipv4.ip_forward=1
    # Destination BR 3
    sudo ip netns exec as1br4 ip route replace 10.2.0.3/32 \
        nexthop via 10.2.0.4 dev veth5
    # Destination BR 1
    sudo ip netns exec as1br4 ip route replace 10.2.0.0/32 \
        nexthop via 10.2.0.7 dev veth6
    # Destination BR 2
    sudo ip netns exec as1br4 ip route replace 10.2.0.1/32 \
        nexthop via 10.2.0.4 dev veth5 weight 1 \
        nexthop via 10.2.0.7 dev veth6 weight 1
    sudo ip netns exec as1br4 ip route replace 10.2.0.2/32 \
        nexthop via 10.2.0.4 dev veth5 weight 1 \
        nexthop via 10.2.0.7 dev veth6 weight 1
}

##############
## Commands ##
##############

cmd_build() {
    # Build docker image
    docker build --build-arg SCION_UID=$(id -u $LOGNAME) --build-arg SCION_GID=$(id -g $LOGNAME) \
    -t ${DOCKER_IMAGE} ./scion_host
}

cmd_run() {
    if [[ "$(docker images -q ${DOCKER_IMAGE} 2> /dev/null)" == "" ]]; then
        cmd_build
    fi

    set -e
    sudo -v

    # Create local topology
    pushd $SCION_ROOT
    ./scion.sh bazel_remote
    ./scion.sh topology -c "$SCRIPT_DIR/topologies/star.yaml"
    popd

    rm -f "$SCION_ROOT/gen/links_established"

    # Rewrite AS ff00:0:1 internal network IPs
    set_control_addr 1-ff00:0:1 10.2.0.0:31000
    set_br_internal_addr 1-ff00:0:1 br1-ff00_0_1-1 10.2.0.0:31002
    set_br_internal_addr 1-ff00:0:1 br1-ff00_0_1-2 10.2.0.2:31004
    set_br_internal_addr 1-ff00:0:1 br1-ff00_0_1-3 10.2.0.4:31006
    set_br_internal_addr 1-ff00:0:1 br1-ff00_0_1-4 10.2.0.6:31008

    # Rewrite BR interface IPs
    set_link_underlay 1-ff00:0:1 10.1.0.1:50000 1-ff00:0:2 10.1.0.2:50000
    set_link_underlay 1-ff00:0:1 10.1.1.1:50000 1-ff00:0:3 10.1.1.2:50000
    set_link_underlay 1-ff00:0:1 10.1.2.1:50000 1-ff00:0:4 10.1.2.2:50000
    set_link_underlay 1-ff00:0:1 10.1.3.1:50000 1-ff00:0:5 10.1.3.2:50000
    set_link_underlay 1-ff00:0:1 10.1.4.1:50000 1-ff00:0:6 10.1.4.2:50000
    set_link_underlay 1-ff00:0:1 10.1.5.1:50000 1-ff00:0:7 10.1.5.2:50000

    # For convenience: Set scion daemon address to default value
    for i in {1..7}
    do
        set_scion_daemon_address ASff00_0_$i 127.0.0.1:30255
    done

    # Split ASff00:0:1 into four program groups
    ed "${SCION_ROOT}/gen/supervisord.conf" << EOF
/^\[group:as1-ff00_0_1]/
.,+1d
i
[group:as1-ff00_0_1_BR1]
programs = br1-ff00_0_1-1,cs1-ff00_0_1-1,sd1-ff00_0_1

[group:as1-ff00_0_1_BR2]
programs = br1-ff00_0_1-2,sd1-ff00_0_1

[group:as1-ff00_0_1_BR3]
programs = br1-ff00_0_1-3,sd1-ff00_0_1

[group:as1-ff00_0_1_BR4]
programs = br1-ff00_0_1-4,sd1-ff00_0_1
.
w
q
EOF

    # Run topology using docker-compose
    rm -f "$SCION_ROOT/logs/*"
    docker-compose -f "$COMPOSE_FILE" -p $COMPOSE_PROJECT up -d

    # Mount network namespaces of the containers
    for i in {1..4}
    do
        mount_netns as1br$i
    done
    for i in {2..7}
    do
        mount_netns as$i
    done

    # Create AS 1 internal links
    create_veth veth0 as1br1 10.2.0.0/31 veth1 as1br2 10.2.0.1/31
    create_veth veth2 as1br2 10.2.0.2/31 veth3 as1br3 10.2.0.3/31
    create_veth veth4 as1br3 10.2.0.4/31 veth5 as1br4 10.2.0.5/31
    create_veth veth6 as1br4 10.2.0.6/31 veth7 as1br1 10.2.0.7/31

    # Create links to other ASes
    create_veth veth8 as1br1 10.1.0.1/24 veth9 as2 10.1.0.2/24
    create_veth veth10 as1br2 10.1.1.1/24 veth11 as3 10.1.1.2/24
    create_veth veth12 as1br2 10.1.2.1/24 veth13 as4 10.1.2.2/24
    create_veth veth14 as1br3 10.1.3.1/24 veth15 as5 10.1.3.2/24
    create_veth veth16 as1br4 10.1.4.1/24 veth17 as6 10.1.4.2/24
    create_veth veth18 as1br4 10.1.5.1/24 veth19 as7 10.1.5.2/24

    # Configure links and routing tables
    disable_checksum_offload
    load_xdp_pass
    set_as1_routes

    # Signal containers to start SCION
    echo '1' > "$SCION_ROOT/gen/links_established"
}

cmd_stop() {
    # Detach XDP border router
    cmd_detach_xdp

    # Delete Docker containers and networks
    docker-compose -f "$COMPOSE_FILE" -p $COMPOSE_PROJECT down

    for i in {1..4}
    do
        umount_netns as1br$i
    done
    for i in {2..7}
    do
        umount_netns as$i
    done
}

cmd_attach_xdp() {
    docker exec -u root as1br1 bash -c \
        "../bpf/br/br-loader attach ../bpf/br/xdp_br.o ../br_config/br1.toml veth8 veth0 veth7"
    docker exec -u root as1br2 bash -c \
        "../bpf/br/br-loader attach ../bpf/br/xdp_br.o ../br_config/br2.toml veth10 veth12 veth1 veth2"
    docker exec -u root as1br3 bash -c \
        "../bpf/br/br-loader attach ../bpf/br/xdp_br.o ../br_config/br3.toml veth14 veth3 veth4"
    docker exec -u root as1br4 bash -c \
        "../bpf/br/br-loader attach ../bpf/br/xdp_br.o ../br_config/br4.toml veth16 veth18 veth5 veth6"
}

cmd_detach_xdp() {
    docker exec -u root as1br1 bash -c \
        "../bpf/br/br-loader detach veth8 veth0 veth7"
    docker exec -u root as1br2 bash -c \
        "../bpf/br/br-loader detach veth10 veth12 veth1 veth2"
    docker exec -u root as1br3 bash -c \
        "../bpf/br/br-loader detach veth14 veth3 veth4"
    docker exec -u root as1br4 bash -c \
        "../bpf/br/br-loader detach veth16 veth18 veth5 veth6"
}

cmd_logs() {
    docker-compose logs
}

cmd_enter() {
    docker exec -it $1 bash -l
}

cmd_clean() {
    rm -rf $SCION_ROOT/gen* $SCION_ROOT/logs $SCION_ROOT/traces
    # Delete pinned maps
    sudo rm -rf /sys/fs/bpf/br1-ff00_0_1-1 /sys/fs/bpf/br1-ff00_0_1-2
    sudo rm -rf /sys/fs/bpf/br1-ff00_0_1-3 /sys/fs/bpf/br1-ff00_0_1-4
}

#################
## Entry point ##
#################

COMMAND=$1
shift

case "$COMMAND" in
    build|run|stop|attach_xdp|detach_xdp|logs|enter|clean)
        "cmd_$COMMAND" "$@" ;;
    *) echo "Command no recognized"; exit 1 ;;
esac
